plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.netflix.dgs.codegen' version '7.0.3'
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('netflixDgsVersion', "10.2.1")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web:3.5.3'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'

	implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-graphql-starter:10.2.1'
	implementation "com.netflix.graphql.dgs:graphql-dgs-extended-scalars:10.2.1"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'org.mapstruct:mapstruct:1.6.3'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.5.3'
	testImplementation 'com.netflix.graphql.dgs:graphql-dgs-spring-graphql-starter-test:10.2.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	dependencyLocking {
		lockAllConfigurations()
	}
}

generateJava {
	schemaPaths = ["${projectDir}/src/main/resources/schema"]
	packageName = 'com.project.backend.codegen'
	generateClient = true
}

tasks.named('test') {
	useJUnitPlatform()
}
